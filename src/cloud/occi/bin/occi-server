#!/bin/sh

# -------------------------------------------------------------------------- #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

if [ -z "$ONE_LOCATION" ]; then
    OCCI_PID=/var/run/one/occi-server.pid
    OCCI_SERVER=/usr/lib/one/ruby/cloud/occi/occi-server.rb
    OCCI_LOCK_FILE=/var/lock/one/.occi.lock
    OCCI_LOG=/var/log/one/occi-server.log
    OCCI_LOG_ERROR=/var/log/one/occi-server.error
    OCCI_ETC=/etc/one/occi-server.conf
else
    OCCI_PID=$ONE_LOCATION/var/occi-server.pid
    OCCI_SERVER=$ONE_LOCATION/lib/ruby/cloud/occi/occi-server.rb
    OCCI_LOCK_FILE=$ONE_LOCATION/var/.occi.lock
    OCCI_LOG=$ONE_LOCATION/var/occi-server.log
    OCCI_LOG_ERROR=$ONE_LOCATION/var/occi-server.error
    OCCI_ETC=$ONE_LOCATION/etc/occi-server.conf
fi

setup()
{
  TMPDIR=$(grep ^:tmpdir: $OCCI_ETC|awk '{print $2}')

  if [ -n "$TMPDIR" ]; then
    export TMPDIR
    mkdir -p $TMPDIR
  fi

  if [ -f $OCCI_LOCK_FILE ]; then
    if [ -f  $OCCI_PID ]; then
      OCCIPID=`cat $OCCI_PID`
      ps $OCCIPID > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        echo "OCCI Server is still running (PID:$OCCIPID). Please try 'occi-server stop' first."
        exit 1
      fi
    fi
    echo "Stale .lock detected. Erasing it."
    rm $OCCI_LOCK_FILE
  fi
}

start()
{
  if [ ! -f "$OCCI_SERVER" ]; then
    echo "Cannot find $OCCI_SERVER."
    exit 1
  fi

  touch $OCCI_LOCK_FILE

  # Start the occi-server daemon
  ruby $OCCI_SERVER >$OCCI_LOG 2>$OCCI_LOG_ERROR &

  LASTRC=$?
  LASTPID=$!

  if [ $LASTRC -ne 0 ]; then
		echo "Error executing occi-server."
    echo "Check $OCCI_LOG_ERROR and $OCCI_LOG for more information"
    exit 1
  else
    echo $LASTPID > $OCCI_PID
  fi

  sleep 2
  ps $LASTPID > /dev/null 2>&1

  if [ $? -ne 0 ]; then
		echo "Error executing occi-server."
    echo "Check $OCCI_LOG_ERROR and $OCCI_LOG for more information"
    exit 1
  fi

  echo "occi-server started"
}

#
# Function that stops the daemon/service
#
stop()
{
  if [ ! -f $OCCI_PID ]; then
    echo "Couldn't find occi-server process pid."
    exit 1
  fi

  # Kill the occi-server daemon. Thin seems to require this twice
  PID=`cat $OCCI_PID`

  kill -INT $PID > /dev/null 2>&1

  # Remove pid files
  rm -f $OCCI_PID > /dev/null 2>&1

  echo "occi-server stopped"
}


case "$1" in
  start)
    setup
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    setup
    start
    ;;
  *)
    echo "Usage: occi-server {start|stop|restart}" >&2
    exit 3
    ;;
esac


