#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION
$: << RUBY_LIB_LOCATION+"/cli"

require 'command_parser'
require 'ozones_helper/vdc_helper.rb'

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`onevdc` command [<args>] [<options>]"
    version OpenNebulaHelper::ONE_VERSION

    set :format, :vdcid, "VDC ID" do |arg|
        arg.match(/^[0123456789]+$/) ? [0,arg] : [-1]
    end

    ########################################################################
    # Global Options
    ########################################################################
    set :option, CommandParser::OPTIONS

    FORCE={
        :name => "force",
        :short => "-f",
        :large => "--force",
        :description => "Force the usage of Hosts in more than one VDC"
    }

    HOST={
        :name => "hosts",
        :short => "-s 1,2,3",
        :large => "--hosts 1,2,3",
        :description => "Host IDs",
        :format => Array
    }

    DS={
        :name => "datastores",
        :short => "-d 1,2,3",
        :large => "--datastores 1,2,3",
        :description => "Datastore IDs",
        :format => Array
    }

    NET={
        :name => "networks",
        :short => "-n 1,2,3",
        :large => "--networks 1,2,3",
        :description => "Network IDs",
        :format => Array
    }

    ADD_DEL_OPTIONS=[HOST, DS, NET]

    begin
        helper = VDCHelper.new "vdc"
    rescue Exception => e
        warn e.message
        exit -1
    end

    command :create, 'Create a new VDC', :file, :options=>[FORCE] do
        helper.create_resource(args[0], options)
    end

    command :show, 'Show information of a particular VDC', :vdcid,
    :options => OZonesHelper::JSON do
        helper.show_resource(args[0],options)
    end

    command :list, 'Lists VDCs in the pool', :options => OZonesHelper::JSON do
        helper.list_pool(options)
    end

    command :delete, 'Deletes a VDC', :vdcid do
        helper.delete_resource(args[0],options)
    end

    command :add, 'Adds the set of resources to the VDC', :vdcid,
        :options=>[FORCE].concat(ADD_DEL_OPTIONS) do
        if options[:hosts].nil? and options[:datastores].nil? and 
           options[:networks].nil?
           STDERR.puts "At least one resource type must be specified: " \
                       "network (-n), host (-s) or datastore (-d) "
           exit 1
        end

        helper.add(args[0], options)
    end

    command :del, 'Deletes the set of resources from the VDC', :vdcid,
        :options => ADD_DEL_OPTIONS do

        if options[:hosts].nil? and options[:datastores].nil? and 
           options[:networks].nil?
           STDERR.puts "At least one resource type must be specified: " \
                       "network (-n), host (-s) or datastore (-d) "
           exit 1
        end

        helper.del(args[0], options)
    end
end
