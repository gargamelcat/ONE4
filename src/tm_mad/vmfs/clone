#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2

VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    VMWARERC=/etc/one/vmwarerc
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    VMWARERC=$ONE_LOCATION/etc/vmwarerc
fi

. $TMCOMMON

#-------------------------------------------------------------------------------
# Retrieve needed information, set dst path and dir
#-------------------------------------------------------------------------------
SRC_PATH=`arg_path $SRC`
SRC_FOLDER=`basename $SRC_PATH`

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`
DST_FOLDER=`basename $DST_PATH`
IMAGE_DS_NAME=`basename $(dirname $SRC_PATH)`
SYSTEM_DS_NAME=`basename $(dirname $(dirname $DST_PATH))`
USE_SSH=$(get_tm_use_ssh $IMAGE_DS_NAME)

#Â Let's check if it is a CDROM
DISK_TYPE=$(disk_type)

#-------------------------------------------------------------------------------
# Set up datastore
#-------------------------------------------------------------------------------

vmfs_set_up

#-------------------------------------------------------------------------------
# Create remote folder
#-------------------------------------------------------------------------------

if [ "$DISK_TYPE" != "CDROM" ]; then
  if [ "$USE_SSH" == "yes" ]; then
  	ssh_make_path $DST_HOST $DST_PATH
  else
    vmfs_create_double_path $SYSTEM_DS_NAME $VMID $DST_FOLDER
  fi
else
  if [ "$USE_SSH" == "yes" ]; then
    ssh_make_path $DST_HOST $(dirname $DST_PATH)
  else
    vmfs_create_simple_path $SYSTEM_DS_NAME $VMID
  fi
fi

#-------------------------------------------------------------------------------
# Clone (cp) SRC into DST
#-------------------------------------------------------------------------------
log "Cloning $SRC_PATH in $DST"

if [ "$USE_SSH" == "yes" ]; then

CLONESCRIPT=$(cat <<EOF
cd $DST_DIR

export PATH=/usr/sbin:/sbin:\$PATH

if which sudo > /dev/null; then
  SUDO_CMD="sudo "
fi

if [ "$DISK_TYPE" != "CDROM" ]; then
  \$SUDO_CMD $VMKFSTOOLS -U $DST_PATH/disk.vmdk
  \$SUDO rm $DST_PATH/*
  \$SUDO_CMD $VMKFSTOOLS -i $SRC_PATH/disk.vmdk -d thin $DST_PATH/disk.vmdk
else
  \$SUDO rm $DST_PATH
  \$SUDO cp $SRC_PATH $DST_PATH
  \$SUDO ln -s $DST_PATH $DST_PATH.iso
fi

EOF
)
	ssh_exec_and_log $DST_HOST "$CLONESCRIPT" "Error cloning $SRC to $DST"
else
  if [ "$DISK_TYPE" != "CDROM" ]; then
    $VMKFSTOOLS $VI_PARAMS -U [$SYSTEM_DS_NAME]$VMID/$DST_FOLDER/disk.vmdk &> /dev/null

    # Erase in case that vmkfstool didn't recognize the disk
    FILES_TO_ERASE=`vifs $VI_PARAMS --dir [$SYSTEM_DS_NAME]$VMID/$DST_FOLDER|grep -v "Content Listing"|grep -v "\-\-\-\-\-\-\-\-"|egrep -v "^[[:space:]]*$"`
    for file in $FILES_TO_ERASE; do
      vifs $VI_PARAMS --force --rm [$SYSTEM_DS_NAME]$VMID/$DST_FOLDER/$file
    done

  	exec_and_log "$VMKFSTOOLS $VI_PARAMS -i [$IMAGE_DS_NAME]$SRC_FOLDER/disk.vmdk -d thin [$SYSTEM_DS_NAME]$VMID/$DST_FOLDER/disk.vmdk" \
                   "Error cloning $SRC to $DST"
  else
    vifs $VI_PARAMS --force --rm [$SYSTEM_DS_NAME]$VMID/$DST_PATH &> /dev/null
    exec_and_log "vifs $VI_PARAMS -c [$IMAGE_DS_NAME]$(basename $SRC_PATH) [$SYSTEM_DS_NAME]$VMID/$DST_FOLDER.iso" \
     "Cannot upload [$IMAGE_DS_NAME]$(basename $SRC_PATH) to [$SYSTEM_DS_NAME]$VMID/$DST_FOLDER.iso on $DST_HOST"
  fi
fi

exit 0
